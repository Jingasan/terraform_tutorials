---
# Serviceの定義
apiVersion: v1
kind: Service
metadata:
  name: "api-service" # Serviceの名前
  namespace: "default" # デプロイ先の名前空間
  labels: # Serviceのラベル名
    app: "api-service"
spec:
  type: LoadBalancer
  selector: # どのPodをServiceの対象とするかをPodのラベルで指定
    app: "api" # Podのラベル名(1)と一致すること
  ports:
    - name: "http-port"
      protocol: "TCP"
      port: 80 # ClusterIPで受け付けるPort番号
      targetPort: 3000 # 転送先のコンテナのPort番号
---
# Deploymentの定義
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "api-deployment" # Deploymentの名前(2)
  namespace: "default" # デプロイ先の名前空間
  labels: # Deploymentのラベル名
    app: "api-deployment"
spec:
  replicas: 3
  selector: # どのPodをDeploymentの対象とするかをPodのラベルで指定
    matchLabels:
      app: "api" # Podのラベル名(1)と一致すること
  template:
    metadata:
      labels: # Podのラベル名
        app: "api" # (1)
    spec:
      containers:
        - name: "api"
          image: "asia-northeast1-docker.pkg.dev/goo-tutorial/api/api:latest"
          ports:
            - containerPort: 3000
          env:
            - name: CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: gcs-access-key
                  key: gcs-access.key
          resources: # [Option]
            limits: # [Option] CPUやメモリなどのリソースの上限値
              memory: 512Mi
              cpu: "1"
            requests: # [Option] CPUやメモリなどのリソースの最低値
              memory: 256Mi
              cpu: "0.2"
---
# HPAの定義
apiVersion: "autoscaling/v2"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "api-hpa" # HPAの名前
  namespace: "default" # デプロイ先の名前空間
  labels: # HPAのラベル名
    app: "api-hpa"
spec:
  scaleTargetRef:
    kind: "Deployment" # オートスケーリング対象をDeploymentとする
    name: "api-deployment" # オートスケーリング対象のDeploymentリソース名(2)
    apiVersion: "apps/v1" # DeploymentのAPIバージョン
  minReplicas: 1 # Pod数の最小値
  maxReplicas: 5 # Pod数の最大値
  metrics: # オートスケーリングのルール設定
    - type: "Resource"
      resource: # Podの平均CPU稼働率が80%を超えたらスケールアウト
        name: "cpu"
        target:
          type: "Utilization"
          averageUtilization: 80
